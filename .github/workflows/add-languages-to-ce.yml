name: Integrate Language Pack with CE

on:
  release:
    types:
      - published # 当发布新版本时触发

permissions:
  contents: write

jobs:
  integrate-and-package:
    runs-on: windows-latest # 需要 Windows 环境来安装 CE

    steps:
      # 检出仓库代码
      - name: Checkout code
        uses: actions/checkout@v3

      # 从当前发行版获取 zh_CN.zip 语言包
      - name: Download Language Pack
        run: |
          $releaseId = (Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest").id
          $assets = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/$releaseId/assets"
          $zhCnZip = $assets | Where-Object { $_.name -eq "zh_CN.zip" }
          $downloadUrl = $zhCnZip.browser_download_url
          Invoke-WebRequest -Uri $downloadUrl -OutFile "zh_CN.zip"
        shell: pwsh

      # 下载 Cheat Engine 7.6
      - name: Download Cheat Engine 7.6
        run: |
          Invoke-WebRequest -Uri "https://d25mwe2145ri5.cloudfront.net/installer/868173670/1501296" -OutFile "CheatEngine76.exe"
        shell: pwsh

      # 安装 Cheat Engine (静默安装)
      - name: Install Cheat Engine
        run: |
          Start-Process -FilePath ".\CheatEngine76.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait
          # 等待安装完成
          Start-Sleep -Seconds 15
        shell: pwsh

      # 查找 CE 安装目录
      - name: Locate CE Installation
        id: locate-ce
        run: |
          $ceInstallPath = "C:\Program Files\Cheat Engine"
          if (Test-Path "$ceInstallPath") {
            echo "CE_PATH=$ceInstallPath" | Out-File -FilePath $env:GITHUB_ENV -Append
            Write-Host "找到 CE 安装路径: $ceInstallPath"
          } else {
            Write-Host "无法找到 CE 安装路径，检查其他可能位置..."
            $ceInstallPath = "${env:ProgramFiles(x86)}\Cheat Engine 7.6"
            if (Test-Path "$ceInstallPath") {
              echo "CE_PATH=$ceInstallPath" | Out-File -FilePath $env:GITHUB_ENV -Append
              Write-Host "找到 CE 安装路径: $ceInstallPath"
            } else {
              Write-Error "无法定位 CE 安装目录！"
              exit 1
            }
          }
        shell: pwsh

       # 集成语言包
      - name: Integrate Language Pack
        run: |
          # 确保 languages 目录存在
          $languagesPath = Join-Path -Path $env:CE_PATH -ChildPath "languages"
          if (-not (Test-Path $languagesPath)) {
            New-Item -ItemType Directory -Path $languagesPath -Force
          }
          
          # 确保 zh_CN 目录存在
          $zhCNPath = Join-Path -Path $languagesPath -ChildPath "zh_CN"
          if (-not (Test-Path $zhCNPath)) {
            New-Item -ItemType Directory -Path $zhCNPath -Force
          }
          
          # 从仓库直接复制文件到 CE languages/zh_CN 目录
          # 排除 .git、.github 等不需要的文件和目录
          $excludeDirs = @(".git", ".github")
          $excludeFiles = @(".gitignore")
          
          Get-ChildItem -Path $env:GITHUB_WORKSPACE -Exclude $excludeDirs | 
            Where-Object { 
              $item = $_
              -not ($excludeDirs | Where-Object { $item.Name -eq $_ }) -and 
              -not ($excludeFiles | Where-Object { $item.Name -eq $_ })
            } | 
            Copy-Item -Destination $zhCNPath -Recurse -Force
          
          # 验证语言包文件是否已正确复制
          $langFiles = Get-ChildItem -Path $zhCNPath -Recurse -File
          if ($langFiles.Count -gt 0) {
            Write-Host "语言包已成功集成，共复制 $($langFiles.Count) 个文件"
            Write-Host "复制的文件："
            $langFiles | Select-Object -First 5 | ForEach-Object { Write-Host " - $($_.Name)" }
            if ($langFiles.Count -gt 5) {
              Write-Host " - ... 以及其他 $($langFiles.Count - 5) 个文件"
            }
          } else {
            Write-Error "语言包集成失败！没有文件被复制。"
            exit 1
          }
        shell: pwsh

      # 创建集成版压缩包
      - name: Create Integrated Package
        run: |
          $ceVersion = "7.6"
          $packageName = "CheatEngine${ceVersion}_with_zh_CN.zip"
          
          # 检查并删除可能的大型无用文件以减小大小
          $unwantedFiles = @(
            "unins000.exe",
            "unins000.dat"
          )
          
          foreach ($file in $unwantedFiles) {
            $filePath = Join-Path -Path $env:CE_PATH -ChildPath $file
            if (Test-Path $filePath) {
              Remove-Item -Path $filePath -Force
              Write-Host "已移除: $filePath"
            }
          }
          
          # 压缩整个 CE 目录
          $compress = @{
            Path = "$env:CE_PATH\*"
            CompressionLevel = "Optimal"
            DestinationPath = $packageName
          }
          Compress-Archive @compress
          
          # 保存压缩包路径用于后续上传
          echo "PACKAGE_PATH=$packageName" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh

      # 上传集成包到发行版
      - name: Upload Integrated Package to Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.PACKAGE_PATH }}
          tag_name: ${{ github.event.release.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}